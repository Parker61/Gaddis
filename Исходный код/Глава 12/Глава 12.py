
# coding: utf-8

# In[ ]:


# -*- coding: utf-8 -*-


# # Глава 12. Рекурсия

# ## 12.1 Введение в рекурсию

# ### Программа 12-1 (endless_recursion.py)

# In[ ]:


# Эта программа демонстрирует рекурсивную функцию.

def main():
    message()

def message():
    print('Это рекурсивная функцию.')
    message()

# Вызвать главную функцию.
main()


# ### Программа 12-2 (recursive.py)

# In[3]:


# Эта программа имеет рекурсивную функцию.

def main():
    # Передав аргумент 5 в функцию message,
    # мы сообщаем ей, что нужно показать
    # сообщение пять раз.
    message(5)

def message(times):
    if times > 0:
        print('Это рекурсивная функция.')
        message(times - 1)

# Вызвать главную функцию.
main()


# ## 2.2 Решение задач при помощи рекурсии

# ### Программа 12-3 (factorial.py)

# In[5]:


# Эта программа применяет рекурсию 
# для вычисления факториала числа.

def main():
    # Получить от пользователя число.
    number = int(input('Введите неотрицательное целое число: '))

     # Получить факториал числа.
    fact = factorial(number)

    # Показать факториал.
    print('Факториал числа', number, 'равняется', fact)

# Функция factorial применяет рекурсию, чтобы
# вычислить факториал своего аргумента, который,
# как предполагается, является неотрицательным.
def factorial(num):
    if num == 0:
        return 1
    else:
        return num * factorial(num - 1)

# Вызвать главную функцию.
main()


# ## 12.3 Примеры рекурсивных алгоритмов на основе рекурсии

# ### Программа 12-4 (range_sum.py)

# In[6]:


# Эта программа демонстрирует функцию range_sum.

def main():
    # Создать список чисел.
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

    # Получить сумму значений в индексных
    # позициях, начиная с 2 вплоть до 5.
    my_sum = range_sum(numbers, 2, 5)

    # Показать сумму.
    print('Сумма значений со 2 по 5 позиции равняется', my_sum)

# Функция range_sum возвращает сумму заданного
# диапазона значений в списке num_list. Параметр start
# задает индексную позицию начального значения.
# Параметр end задает индексную позицию конечного значения.
def range_sum(num_list, start, end):
    if start > end:
        return 0
    else:
        return num_list[start] + range_sum(num_list, start + 1, end)

# Вызвать главную функцию.
main()


# ### Программа 12-5 (fibonacci.py)

# In[12]:


# Эта программа применяет рекурсию для печати чисел
# последовательности Фибоначчи.

def main():
    print('Первые 10 чисел')
    print('последовательности Фибоначчи:')

    for number in range(1, 11):
        print(fib(number))

# Функция fib возвращает n-ое число
# последовательности Фибоначчи.
def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)

# Вызвать главную функцию.
main()


# ### Программа 12-6 (gcd.py)

# In[1]:


# Эта программа применяет рекурсию для нахождения
# наибольшего общего делителя (НОД или GCD) двух чисел.

def main():
    # Получить два числа.
    num1 = int(input('Введите целое число: '))
    num2 = int(input('Введите еще одно целое число: '))

    # Показать НОД (GCD).
    print('Наибольший общий делитель')
    print('этих двух чисел равняется', gcd(num1, num2))

# Функция gcd возвращает наибольший общий 
# делитель двух чисел.
def gcd(x, y):
    if x % y == 0:
        return y
    else:
        return gcd(x, x % y)

# Вызвать главную функцию.
main()


# ### Программа 12-7 (towers_of_hanoi.py)

# In[13]:


# Эта программа имитирует головоломку 'Ханойские башни'.

def main():
    # Задать несколько исходных значений.
    num_discs = 3
    from_peg = 1
    to_peg = 3
    temp_peg = 2

    # Решить задачу.
    move_discs(num_discs, from_peg, to_peg, temp_peg)
    print('Все кольца перемещены!')

# Функция moveDiscs показывает процесс перемещения 
# колец в головоломке 'Ханойские башни'.
# Параметры функции:
# num: количество перемещаемых колец.
# from_peg: стержень, с которого взять кольцо.
# to_peg: стержень, на который переложить кольцо.
# temp_peg: временный стержень.
def move_discs(num, from_peg, to_peg, temp_peg):
    if num > 0:
        move_discs(num - 1, from_peg, temp_peg, to_peg)
        print('Переложить кольцо с', from_peg, 'на', to_peg)
        move_discs(num - 1, temp_peg, to_peg, from_peg)

# Вызвать главную функцию.
main()


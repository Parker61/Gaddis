
# coding: utf-8

# In[44]:


#-*- coding: utf-8 -*-


# # Глава 7. Списки и кортежи

# ## 7.2	Введение в списки

# ### Программа 7-1 (sales_list.py)

# In[7]:


# Константа NUM_DAYS содержит количество дней,
# за которые мы соберем данные продаж.
NUM_DAYS = 5

def main():
    # Создать список, который будет содержать
    # продажи за каждый день.
    sales = [0] * NUM_DAYS

    # Создать переменную, которая будет содержать индекс.
    index = 0

    print('Введите продажи за каждый день.')

    # Получить продажи за каждый день.
    while index < NUM_DAYS:
        print('День №', index + 1, ': ', sep='', end='')
        sales[index] = float(input())
        index += 1

    # Показать введенные значения.
    print('Вот значения, которые были введены:')
    for value in sales:
        print(value)

# Вызвать главную функцию.
main()


# ## 7.4 Нахождение значение в списках при помощи инструкции in

# ### Программа 7-2 (in_list.py)

# In[5]:


# Эта программа демонстрирует оператор in
# применительно к списку.

def main():
    # Создать список номеров изделий.
    prod_nums = ['V475', 'F987', 'Q143', 'R688']

    # Получить искомый номер изделия.
    search = input('Введите номер изделия: ')

    # Определить, что номер изделия имеется в списке.
    if search in prod_nums:
        print(search, 'найден в списке.')
    else:
        print(search, 'не найден в списке.')

# Вызвать главную функцию.
main()


# ## 7.5 Списковые методы и полезные встроенные функции

# ### Программа 7-3 (list_append.py)

# In[6]:


# Эта программа демонстрирует применение метода append
# для добавления значений в список.

def main():
    # Сначала создать пустой список.
    name_list = []

    # Создать переменнную для управления циклом.
    again = 'д'

    # Добавить в список несколько имен.
    while again == 'д':
        # Получить от пользователя имя.
        name = input('Введите имя: ')

        # Добавить имя в конец списка.
        name_list.append(name)

        # Добавить еще одно?
        print('Желаете добавить еще одно имя?')
        again = input('д = да, все остальное = нет: ')
        print()

    # Показать введенные имена.
    print('Вот имена, которые были введены.')

    for name in name_list:
        print(name)

# Вызвать главную функцию.
main()


# ### Программа 7-4 (index_list.py)

# In[11]:


# Эта программа демонстрирует, как получить 
# индексную позицию значения в списке и затем 
# заменить это значение на новое.

def main():
    # Создать список с несколькими значениями.
    food = ['Пицца', 'Бургеры', 'Чипсы']

    # Показать список.
    print('Вот значения списка продуктов питания:')
    print(food)

    # Получить значение, подлежащее изменению.
    item = input('Какое значение следует изменить? ')

    try:
        # Получить индексную позицию значения в списке.
        item_index = food.index(item)

        # Получить значение, на которое следует заменить.
        new_item = input('Введите новое значение: ')

        # Заменить старое значение на новое.
        food[item_index] = new_item

        # Показать список.
        print('Вот пересмотренный список:')
        print(food)
    except ValueError:
         print('Это значение в списке не найден.')

# Вызвать главную функцию.
main()


# ### Программа 7-5 (insert_list.py)

# In[9]:


# Это программа демонстрирует метод insert.

def main():
    # Создать список с несколькими именами.
    names = ['Джеймс', 'Кэтрин', 'Билл']

    # Показать список.
    print('Список перед ставкой:')
    print(names)

    # Вставить новое имя в элемент 0.
    names.insert(0, 'Джо')

    # Показать список еще раз.
    print('Список после вставки:')
    print(names)

# Вызвать главную функцию.
main()


# ### Программа 7-6 (remove_item.py)

# In[12]:


# Эта программа демонстрирует применение метода 
# remove для удаления значения из списка.

def main():
    # Создать список с несколькими значениями.
    food = ['Пицца', 'Бургеры', 'Чипсы']

    # Показать список.
    print('Вот значения списка продуктов питания:')
    print(food)

    # Получить значения, подлежащее удалению.
    item = input('Какое следует значение удалить? ')

    try:
        # Удалить значение.
        food.remove(item)

        # Показать список.
        print('Вот пересмотренный список:')
        print(food)

    except ValueError:
        print('Это значение в списке не найдено.')

# Вызвать главную функцию.
main()


# ## 7.7 Обработка списков

# ### Программа 7-7 (barista_pay.py)

# In[15]:


# Эта программа вычисляет заработную плату 
# для каждого сотрудника Меган.

# NUM_EMPLOYEES применяется как константа
# для размера списка.
NUM_EMPLOYEES = 6

def main():
    # Создать список, который будет содержать отработанные часы.
    hours = [0] * NUM_EMPLOYEES

    # Получить часы, отработанные каждым сотрудником.
    for index in range(NUM_EMPLOYEES):
        print('Введите количество отработанных часов сотрудником ',
              index + 1, ': ', sep='', end='')
        hours[index] = float(input())

    # Получить почасовую ставку оплаты.
    pay_rate = float(input('Введите почасовую ставку оплаты: '))

    # Показать заработную плату каждого сотрудника.
    for index in range(NUM_EMPLOYEES):
        gross_pay = hours[index] * pay_rate
        print('Зарплата сотрудника ', index + 1, ': $',
              format(gross_pay, ',.2f'), sep='')

# Вызвать главную функцию.
main()


# ### Программа 7-8 (total_list.py)

# In[16]:


# Эта программа вычисляет сумму значений
# в списке.

def main():
    # Создать список.
    numbers = [2, 4, 6, 8, 10]

    # Создать переменную для применения в качестве накопителя.
    total = 0

    # Вычислить сумму значений элементов списка.
    for value in numbers:
        total += value

    # Показать сумму значений элементов списка.
    print('Сумма элементов составляет', total)

# Вызвать главную функцию.
main()


# ### Программа 7-9 (average_list.py)

# In[18]:


# Эта программа вычисляет среднее арифметическое
# значение в списке значений.

def main():
    # Создать список.
    scores = [2.5, 7.3, 6.5, 4.0, 5.2]

    # Создать переменную для применения в качестве накопителя.
    total = 0.0

    # Вычислить сумму значений в списке.
    for value in scores:
        total += value

    # Вычислить среднее арифметическое элементов.
    average = total / len(scores)

    # Показать среднее значение в списке значений.
    print('Среднее значение элементов составляет', average)

# Вызвать главную функцию.
main()


# ### Программа 7-10 (total_function.py)

# In[19]:


# Эта программа применяет функцию для вычисления
# суммы значений в списке.

def main():
    # Создать список.
    numbers = [2, 4, 6, 8, 10]

    # Показать сумму значений элементов списка.
    print('Сумма составляет', get_total(numbers))

# Функция get_total принимает список в качестве
# аргумента и возвращает сумму значений
# с писке.
def get_total(value_list):
    # Создать переменную для применения в качестве накопителя.
    total = 0

    # Вычислить сумму значений элементов списка.
    for num in value_list:
        total += num

    # Вернуть сумму.
    return total

# Вызвать главную функцию.
main()


# ### Программа 7-11 (return_list.py)

# In[20]:


# Эта программа применяет функцию для создания списка.
# Указанная функция возвращает ссылку на список.

def main():
    # Получить список с хранящимися в нем значениями.
    numbers = get_values()

    # Показать значения в списке.
    print('Числа в списке:')
    print(numbers)

# Функция get_values получает от пользователя 
# ряд чисел и сохраняет их в списке. 
# Эта функция возвращает сслыку на список.
def get_values():
    # Создать пустой список.
    values = []

    # Создать переменную для управления циклом.
    again = 'д'

    # Получить значения от пользователя и
    # добавить их в список.
    while again == 'д':
        # Получить число и добавить его в список.
        num = int(input('Введите число: '))
        values.append(num)

        # Желаете проделать это еще раз?
        print('Желаете добавить еще одно число?')
        again = input('д = да, все остальное = нет: ')
        print()

    # Вернуть список.
    return values

# Вызвать главную функцию.
main()


# ### Программа 7-12 (drop_lowest_score.py)

# In[1]:


# Эта программ получает серию оценок за лабораторные 
# работы и вычисляет среднюю оценку,
# отбрасывая самую низкую.

def main():
    # Получить от пользователя оценки.
    scores = get_scores()

    # Получить сумму оценок.
    total = get_total(scores)

    # Получить самую низкую оценку.
    lowest = min(scores)

    # Вычесть саму низкую оценку из суммы.
    total -= lowest

    # Вычислить среднее значение. Обратите внимание, что
    # мы делим на количество оценок минус 1, потому что
    # самая низкая оценка была отброшена.
    average = total / (len(scores) - 1)

    # Показать среднее значение.
    print('Средняя оценка с учетом отброшенной',
          'самой низкой оценки:', average)

# Функция get_scores получает от пользователя 
# серию оценок и сохраняет их в списке.
# Указанная функция возвращает ссылку на список.
def get_scores():
    # Создать пустой список.
    test_scores = []

    # Создать переменную для управления циклом.
    again = 'д'

    # Получить от пользователя оценки и добавить их
    # в список.
    while again == 'д':
        # Получить оценку и добавить ее в список.
        value = float(input('Введите оценку: '))
        test_scores.append(value)

        # Желаете проделать это еще раз?
        print('Желаете  добавить еще одну оценку?')
        again = input('д = да, все остальное = нет: ')
        print()

    # Вернуть список.
    return test_scores

# Функция get_total принимает список в качестве
# аргумента и возвращает сумму значений
# в списке.
def get_total(value_list):
    # Создать переменную для применения в качестве накопителя.
    total = 0.0

    # Вычислить сумму значений элементов списка.
    for num in value_list:
        total += num

    # Вернуть сумму.
    return total

# Вызвать главную функцию.
main()


# ### Программа 7-13 (writelines.py)

# In[3]:


# -*- coding: cp1251 -*- 

# Эта программа применяет метод writelines для сохранения
# списка строковых значений в файл.

def main():
    # Создать список строковых значений.
    cities = ['Нью Йорк', 'Бостон', 'Атланта', 'Даллас'] 

    # Открыть файл для записи.
    outfile = open('cities.txt', 'w')

    # Записать список в файл.
    outfile.writelines(cities)

    # Закрыть файл.
    outfile.close()

# Вызвать главную функцию.
main()


# ### Программа 7-14 (write_list.py)

# In[4]:


# Эта программа сохраняет список строковых значений в файл.

def main():
    # Создать список строковых значений.
    cities = ['Нью Йорк', 'Бостон', 'Атланта', 'Даллас'] 

    # Открыть файл для записи.
    outfile = open('cities.txt', 'w')

    # Записать список в файл.
    for item in cities:
        outfile.write(item + '\n')

    # Закрыть файл.
    outfile.close()

# Вызвать главную функцию.
main()


# ### Программа 7-15 (read_list.py)

# In[5]:


# Эта программа считывает содержимое файла в список.

def main():
    # Открыть файл для чтения.
    infile = open('cities.txt', 'r')

    # Прочитать содержимое файла в список.
    cities = infile.readlines()

    # Закрыть файл.
    infile.close()

    # Удалить из каждого элемента символ \n.
    index = 0
    while index < len(cities):
        cities[index] = cities[index].rstrip('\n')
        index += 1

    # Напечатать содержимое списка.
    print(cities)

# Вызвать главную функцию.
main()


# ### Программа 7-16 (write_number_list.py)

# In[6]:


# Эта программа сохраняет список чисел в файл.

def main():
    # Создать список чисел.
    numbers = [1, 2, 3, 4, 5, 6, 7]

    # Открыть файл для записи.
    outfile = open('numberlist.txt', 'w')

    # Записать список в файл.
    for item in numbers:
        outfile.write(str(item) + '\n')

    # Закрыть файл.
    outfile.close()

# Вызвать главную функцию.
main()


# ### Программа 7-17 (read_number_list.py)

# In[7]:


# Эта программа считывает числа из файла в список.

def main():
    # Открыть файл для чтения.
    infile = open('numberlist.txt', 'r')

    # Прочитать содержимое файла в список.
    numbers = infile.readlines()

    # Закрыть файл.
    infile.close()

    # Конвертировать каждый элемент в тип int.
    index = 0
    while index < len(numbers):
        numbers[index] = int(numbers[index])
        index += 1

    # Напечатать содержимое списка.
    print(numbers)

# Вызвать главную функцию.
main()


# ## 7.8 Двумерные списки

# ### Программа 7-18 (random_numbers.py)

# In[8]:


# Эта программа присваивает случайные числа
# двумерному списку.
import random

# Константы для строк и столбцов
ROWS = 3
COLS = 4

def main():
    # Создать двумерный список.
    values = [[0, 0, 0, 0],
              [0, 0, 0, 0],
              [0, 0, 0, 0]]

    # Заполнить список случайными числами.
    for r in range(ROWS):
        for c in range(COLS):
            values[r][c] = random.randint(1, 100)

    # Показать случайные числа.
    print(values)

# Вызвать главную функцию.
main()


# ## 7.10 Построение графиков с данными списка при помощи пакета matplotlib 

# In[21]:


from IPython.display import Image
get_ipython().run_line_magic('matplotlib', 'inline')
DPI = 600   # разрешающая способность файла png: дисплей=300, публикация=600

from matplotlib import rcParams
rcParams['font.family']     = 'sans-serif'
rcParams['font.sans-serif'] = ['Ubuntu Condensed']
rcParams['figure.figsize']  = (4, 3.8)
rcParams['legend.fontsize'] = 10
rcParams['xtick.labelsize'] = 9
rcParams['ytick.labelsize'] = 9


# ### Программа 7-19 (line_graph1.py)

# In[31]:


# Эта программа выводит простой линейный график.
import matplotlib.pyplot as plt

def main():
    # Создать списки для координат X и Y каждой точки данных.
    x_coords = [0, 1, 2, 3, 4]
    y_coords = [0, 3, 1, 5, 2]

    # Построить линейный график.
    plt.plot(x_coords, y_coords)

    # Показать линейный график.
    plt.tight_layout()
    plt.savefig('07_01.png', dpi=DPI)
    plt.show()

# Вызвать главную функцию.
main()


# ### Программа 7-20 (line_graph2.py)

# In[30]:


# Эта программа выводит простой линейный график.
import matplotlib.pyplot as plt

def main():
    # Создать списки для координат X и Y каждой точки данных.
    x_coords = [0, 1, 2, 3, 4]
    y_coords = [0, 3, 1, 5, 2]

    # Построить линейный график.
    plt.plot(x_coords, y_coords)

    # Добавить заголовок.
    plt.title('Образец данных')

    # Добавить на оси описательные метки.
    plt.xlabel('Это ось X')
    plt.ylabel('Это ось Y')

    # Добавить сетку.
    plt.grid(True)

    # Показать линейный график.
    plt.tight_layout()
    plt.savefig('07_02.png', dpi=DPI)
    plt.show()

# Вызвать главную функцию.
main()


# ### Программа 7-21 (line_graph3.py)

# In[29]:


# Эта программа выводит простой линейный график.
import matplotlib.pyplot as plt

def main():
    # Создать списки для координат X и Y каждой точки данных.
    x_coords = [0, 1, 2, 3, 4]
    y_coords = [0, 3, 1, 5, 2]

    # Построить линейный график.
    plt.plot(x_coords, y_coords)

    # Добавить заголовок.
    plt.title('Образец данных')

    # Добавить на оси описательные метки.
    plt.xlabel('Это ось X')
    plt.ylabel('Это ось Y')

    # Задать границы осей.
    plt.xlim(xmin=-1, xmax=10)
    plt.ylim(ymin=-1, ymax=6)

    # Добавить сетку.
    plt.grid(True)

    # Показать линейный график.
    plt.tight_layout()
    plt.savefig('07_03.png', dpi=DPI)    
    plt.show()

# Вызвать главную функцию.
main()


# ### Программа 7-22 (line_graph4.py)

# In[28]:


# Эта программа выводит простой линейный график.
import matplotlib.pyplot as plt

def main():
    # Создать списки для координат X и Y каждой точки данных.
    x_coords = [0, 1, 2, 3, 4]
    y_coords = [0, 3, 1, 5, 2]

    # Построить линейный график.
    plt.plot(x_coords, y_coords)

    # Добавить заголовок.
    plt.title('Продажи с разбивкой по годам')

    # Добавить на оси описательные метки.
    plt.xlabel('Год')
    plt.ylabel('Объем продаж')

    # Настроить метки делений.
    plt.xticks([0, 1, 2, 3, 4],
               ['2016', '2017', '2018', '2019', '2020'])
    plt.yticks([0, 1, 2, 3, 4, 5],
               ['$0m', '$1m', '$2m', '$3m', '$4m', '$5m'])

    # Добавить сетку.
    plt.grid(True)

    # Показать линейный график.
    plt.tight_layout()
    plt.savefig('07_04.png', dpi=DPI)   
    plt.show()

# Вызвать главную функцию.
main()


# ### Программа 7-22 (line_graph5.py)

# In[27]:


# Эта программа выводит простой линейный график.
import matplotlib.pyplot as plt

def main():
    # Создать списки для координат X и Y каждой точки данных.
    x_coords = [0, 1, 2, 3, 4]
    y_coords = [0, 3, 1, 5, 2]

    # Построить линейный график.
    plt.plot(x_coords, y_coords, marker='o')

    # Добавить заголовок.
    plt.title('Продажи с разбивкой по годам')

    # Добавить на оси описательные метки.
    plt.xlabel('Год')
    plt.ylabel('Объем продаж')

    # Настроить метки делений.
    plt.xticks([0, 1, 2, 3, 4],
               ['2016', '2017', '2018', '2019', '2020'])
    plt.yticks([0, 1, 2, 3, 4, 5],
               ['$0m', '$1m', '$2m', '$3m', '$4m', '$5m'])

    # Добавить сетку.
    plt.grid(True)

    # Показать линейный график.
    plt.tight_layout()
    plt.savefig('07_05.png', dpi=DPI)   
    plt.show()

# Вызвать главную функцию.
main()


# ### Программа 7-24 (bar_chart1.py)

# In[26]:


# Эта программа выводит простую столбчатую диаграмму.
import matplotlib.pyplot as plt

def main():
    # Создать список с координатами X левого края каждого столбика
    left_edges = [0, 10, 20, 30, 40]

    # Создать список с высотами каждого столбика.
    heights = [100, 200, 300, 400, 500]

    # Построить столбчатую диаграмму.
    plt.bar(left_edges, heights)

    # Построить столбчатую диаграмму.
    plt.tight_layout()
    plt.savefig('07_06.png', dpi=DPI)   
    plt.show()

# Показать столбчатую диаграмму.
main()


# ### Программа 7-25 (bar_chart2.py)

# In[25]:


# Эта программа выводит простую столбчатую диаграмму.
import matplotlib.pyplot as plt

def main():
    # Создать список с координатами X левого края каждого столбика
    left_edges = [0, 10, 20, 30, 40]

    # Создать список с высотами каждого столбика.
    heights = [100, 200, 300, 400, 500]

    # Создать переменную для ширины столбика.
    bar_width = 5

    # Построить столбчатую диаграмму.
    plt.bar(left_edges, heights, bar_width)

    # Показать столбчатую диаграмму.
    plt.tight_layout()
    plt.savefig('07_07.png', dpi=DPI)   
    plt.show()

# Вызвать главную функцию.
main()


# ### Программа 7-26 (bar_chart3.py)  

# In[24]:


# Эта программа выводит диаграмму объема продаж.
import matplotlib.pyplot as plt

def main():
    # Создать список с координатами X левого края каждого столби-ка.
    left_edges = [0, 10, 20, 30, 40]

    # Создать список с высотами каждого столбика.
    heights = [100, 200, 300, 400, 500]

    # Создать переменную для ширины столбика.
    bar_width = 10

    # Построить столбчатую диаграмму.
    plt.bar(left_edges, heights, bar_width, 
            color=('r', 'g', 'b', 'm', 'k'))

    # Добавить заголовок.
    plt.title('Продажи с разбивкой по годам')

    # Добавить на оси описательные метки.
    plt.xlabel('Год')
    plt.ylabel('Объем продаж')

    # Настроить метки делений.
    plt.xticks([5, 15, 25, 35, 45],
               ['2016', '2017', '2018', '2019', '2020'])
    plt.yticks([0, 100, 200, 300, 400, 500],
               ['$0m', '$1m', '$2m', '$3m', '$4m', '$5m'])

    # Показать столбчатую диаграмму.
    plt.tight_layout()
    plt.savefig('07_08.png', dpi=DPI)   
    plt.show()

# Вызвать главную функцию.
main()


# ### Программа 7-27 (pie_chart1.py)

# In[22]:


# Эта программа выводит простую круговую диаграмму.
import matplotlib.pyplot as plt

def main():
    # Создать список значений
    values = [20, 60, 80, 40]

    # Создать из этих значений круговую диаграмму.
    plt.pie(values)

    # Показать круговую диаграмму.
    plt.tight_layout()
    plt.savefig('07_09.png', dpi=DPI)  
    plt.show()

# Вызвать главную функцию.
main()


# ### Программа 7-28 (pie_chart2.py)

# In[23]:


# Эта программа выводит простую круговую диаграмму.
import matplotlib.pyplot as plt

def main():
    # Создать список объемов продаж.
    sales = [100, 400, 300, 600]

    # Создать список of меток долей.
    slice_labels = ['1-й кв', '2-й кв', '3-й кв', '4-й кв']

    # Создать из этих значений круговую диаграмму.
    plt.pie(sales, labels=slice_labels)

    # Добавить заголовок.
    plt.title('Продажи с разбивкой по кварталам')

    # Показать круговую диаграмму.
    plt.tight_layout()
    plt.savefig('07_10.png', dpi=DPI)  
    plt.show()

# Вызвать главную функцию.
main()


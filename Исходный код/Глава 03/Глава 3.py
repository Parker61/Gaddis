
# coding: utf-8

# In[ ]:


# -*- coding: utf-8 -*-


# # Глава 3. Управляющие структуры принятия решения и булева логика

# ## 3.1	Инструкция if

# ### Программа 3-1 (test_average.py)

# In[1]:


# Эта программа получает три оценки за контрольные работы и
# показывает их средний балл. Она поздравляет пользователя, 
# если средний балл высокий.

# Именованная константа HIGH_SCORE содержит значение, которое
# считается высоким баллом.
HIGH_SCORE = 95
 
# Получить три оценки за тесты.
test1 = int(input('Введите оценку 1: ' ))
test2 = int(input('Введите оценку 2: ' ))
test3 = int(input('Введите оценку 3: ' ))

# Рассчитать средний балл.
average = (test1 + test2 + test3) / 3

# Напечатать средний балл.
print('Средний балл составляет:', average)

# Если средний балл высокий, то
# поздравить пользователя.
if average >= HIGH_SCORE:
    print('Поздравляем!')
    print('Отличный средний балл!')


# ## 3.2 Инструкция if-else

# ### Программа 3-2 (auto_repair_payroll.py)

# In[2]:


# Именованные константы представляют базовые часы и 
# мультипликатор сверхурочного времени.
BASE_HOURS = 40      # Базовые часы в неделю
OT_MULTIPLIER = 1.5  # Мультипликатор сверхурочного времени

# Получить отработанные часы и почасовую ставку оплаты труда.
hours = float(input('Введите количество отработанных часов: '))
pay_rate = float(input('Введите почасовую ставку оплаты труда: '))

# Рассчитать и показать заработную плату до удержаний.
if hours > BASE_HOURS:
    # Рассчитать заработную плату до удержаний без сверхурочных.
    # Сначала получить количество отработанных сверхурочных часов.
    overtime_hours = hours - BASE_HOURS

    # Рассчитать оплату за работу в сверхурочное время.
    overtime_pay = overtime_hours * pay_rate * OT_MULTIPLIER

    # Рассчитать заработную плату до удержаний.
    gross_pay = BASE_HOURS * pay_rate + overtime_pay
else:
    # Рассчитать заработную плату до удержаний без сверхурочных.
    gross_pay = hours * pay_rate

# Показать заработную плату до удержаний.
print('Заработная плата до удержаний составляет: $', 
      format(gross_pay, ',.2f'), sep='')


# ## 3.3 Сравнение строковых значений

# ### Программа 3-3 (password.py)

# In[4]:


# Эта программа сравнивает два строковых значения.
# Получить от пользователя пароль.
password = input('Введите пароль: ')

# Определить, был ли введен правильный
# пароль.
if password == 'prospero':
    print('Пароль принят.')
else:
    print('Извините, этот пароль неверный.')


# ### Программа 3-4 (sort_names.py)

# In[12]:


# Эта программа сравнивает строковые значения оператором <.
# Получить от пользователя два имени.
name1 = input('Введите фамилию и имя: ')
name2 = input('Введите еще одну фамилию и имя: ')

# Показать имена в алфавитном порядке.
print('Вот имена, ранжированные по алфавиту:')

if name1 < name2:
    print(name1)
    print(name2)
else:
    print(name2)
    print(name1)


# ## 3.4 Вложенные структуры принятия решения и инструкция if-elif-else  

# ### Программа 3-5 (loan_qualifier.py)

# In[7]:


# Эта программа определяет, удовлетворяет ли
# клиент требованиям банка на получение ссуды.

MIN_SALARY = 30000.0 # Минимально допустимая годовая зарплата
MIN_YEARS = 2        # Минимально допустимый стаж на текущем месте работы

# Получить размер годовой заработной платы клиента.
salary = float(input('Введите свой годовой оклад: '))

# Получить количество лет на текущем месте работы.
years_on_job = int(input('Введите количество лет' +
                         'рабочего стажа: '))

# Определить, удовлетворяет ли клиент требованиям.
if salary >= MIN_SALARY:
    if years_on_job >= MIN_YEARS:
        print('Вы прошли квалификацию на получение ссуды.')
    else:
        print('Вы должны отработать',
              'не менее', MIN_YEARS,
              'лет, чтобы пройти квалификацию.')
else:
    print('Вы должны зарабатывать не менее $',
          format(MIN_SALARY, ',.2f'),
          ' в год, чтобы пройти квалификацию.', sep='')


# ### Программа 3-6 (grader.py)

# In[11]:


# Эта программа получает от пользователя числовую оценку
# и показывает буквенный уровень знаний согласно этой оценки.
 
# Именованные константы, представляющие пороги уровней
A_SCORE = 90
B_SCORE = 80
C_SCORE = 70
D_SCORE = 60

# Получить от пользователя оценку за контрольную работу.
score = int(input('Введите свою оценку: '))

# Определить буквенный уровень.
if score >= A_SCORE:
    print('Ваш уровень - A.')
else:
    if score >= B_SCORE:
        print('Ваш уровень - B.')
    else:
        if score >= C_SCORE:
            print('Ваш уровень - C.')
        else:
            if score >= D_SCORE:
                print('Ваш уровень - D.')
            else:
                print('Ваш уровень - F.')


# ## 3.5 Логические операторы

# ### Программа 3-7 (loan_qualifier2.py)

# In[9]:


# Эта программа определяет, удовлетворяет ли 
# клиент требованиям банка на получение ссуды.

MIN_SALARY = 30000.0 # Минимально допустимая годовая зарплата
MIN_YEARS = 2        # Минимально допустимый стаж на текущем месте работы

# Получить размер годовой заработной платы клиента.
salary = float(input('Введите свой годовой оклад: '))

# Получить количество лет на текущем месте работы.
years_on_job = int(input('Введите количество лет' +
                         'рабочего стажа: '))

# Определить, удовлетворяет ли клиент требованиям.
if salary >= MIN_SALARY and years_on_job >= MIN_YEARS:
    print('Вы прошли квалификацию на получение ссуды.')
else:
    print('Вы не прошли квалификацию на получение этой ссуды.')


# ### Программа 3-8 (loan_qualifier3.py)

# In[10]:


# Эта программа определяет, удовлетворяет ли 
# клиент требованиям банка на получение ссуды.

MIN_SALARY = 30000.0 # Минимально допустимая годовая зарплата
MIN_YEARS = 2        # Минимально допустимый стаж на текущем месте работы

# Получить размер годовой заработной платы клиента.
salary = float(input('Введите свой годовой оклад: '))

# Получить количество лет на текущем месте работы.
years_on_job = int(input('Введите количество лет' +
                         'рабочего стажа: '))

# Определить, удовлетворяет ли клиент требованиям.
if salary >= MIN_SALARY or years_on_job >= MIN_YEARS:
    print('Вы прошли квалификацию на получение ссуды.')
else:
    print('Вы не прошли квалификацию на получение этой ссуды.')


# ## 3.7	Черепашья графика: определение состояния черепахи

# ### Программа 3-9 (hit_the_target.py)

# In[ ]:


# Игра "Порази цель"
import turtle

# Именованные константы
SCREEN_WIDTH = 600     # Ширина экрана
SCREEN_HEIGHT = 600    # Высота экрана
TARGET_LLEFT_X = 100   # Левая нижняя координата X цели 
TARGET_LLEFT_Y = 250   # Левая нижняя координата Y цели
TARGET_WIDTH = 25      # Ширина цели
FORCE_FACTOR = 30      # Фактор произвольной силы
PROJECTILE_SPEED = 1   # Скорость анимации снаряда
NORTH = 90             # Угол северного направления
SOUTH = 270            # Угол южного направления
EAST = 0               # Угол восточного направления
WEST = 180             # Угол западного направления

# Настроить окно.
turtle.setup(SCREEN_WIDTH, SCREEN_HEIGHT)

# Нарисовать цель.
turtle.hideturtle()
turtle.speed(0)
turtle.penup()
turtle.goto(TARGET_LLEFT_X, TARGET_LLEFT_Y)
turtle.pendown()
turtle.setheading(EAST)
turtle.forward(TARGET_WIDTH)
turtle.setheading(NORTH)
turtle.forward(TARGET_WIDTH)
turtle.setheading(WEST)
turtle.forward(TARGET_WIDTH)
turtle.setheading(SOUTH)
turtle.forward(TARGET_WIDTH)
turtle.penup()

# Центрировать черепаху.
turtle.goto(0, 0)
turtle.setheading(EAST)
turtle.showturtle()
turtle.speed(PROJECTILE_SPEED)

# Получить угол и силу от пользователя.
angle = float(input("Введите угол снаряда: "))
force = float(input("Введите пусковую силу (1−10): "))

# Рассчитать расстояние.
distance = force * FORCE_FACTOR

# Задать направление
turtle.setheading(angle)

# Запустить снаряд.
turtle.pendown()
turtle.forward(distance)

# Снаряд поразил цель?
if (turtle.xcor() >= TARGET_LLEFT_X and
    turtle.xcor() <= (TARGET_LLEFT_X + TARGET_WIDTH) and
    turtle.ycor() >= TARGET_LLEFT_Y and
    turtle.ycor() <= (TARGET_LLEFT_Y + TARGET_WIDTH)):
        print('Цель поражена!')
else:
        print('Вы промахнулись.')



# coding: utf-8

# In[ ]:


# -*- coding: utf-8 -*-


# # Глава 9. Словари и множества

# ## 9.1 Словари

# ### Программа 9-1 (card_dealer.py)

# In[23]:


# Эта программа применяет словарь в качестве колоды карт.

def main():
    # Создать колоду карт.
    deck = create_deck()

    # Получить количество карт для раздачи.
    num_cards = int(input('Сколько карт раздать? '))

    # Раздать карты.
    deal_cards(deck, num_cards)

# Функция create_deck возвращает словарь,
# представляющий колоду карт.
def create_deck():
    # Создать словарь, в котором каждая карта и ее значение
    # хранится в виде пар ключ/значение.
    deck = {'Туз пик':1, '2 пик':2, '3 пик':3,
            '4 пик':4, '5 пик':5, '6 пик':6,
            '7 пик':7, '8 пик':8, '9 пик':9,
            '10 пик':10, 'Валет пик':10,
            'Дама пик':10, 'Король пик': 10,

            'Туз червей':1, '2 червей':2, '3 червей':3,
            '4 червей':4, '5 червей':5, '6 червей':6,
            '7 червей':7, '8 червей':8, '9 червей':9,
            '10 червей':10, 'Валет червей':10,
            'Дама червей':10, 'Король червей': 10,

            'Туз треф':1, '2 треф':2, '3 треф':3,
            '4 треф':4, '5 треф':5, '6 треф':6,
            '7 треф':7, '8 треф':8, '9 треф':9,
            '10 треф':10, 'Валет треф':10,
            'Дама треф':10, 'Король треф': 10,

            'Туз бубей':1, '2 бубей':2, '3 бубей':3,
            '4 бубей':4, '5 бубей':5, '6 бубей':6,
            '7 бубей':7, '8 бубей':8, '9 бубей':9,
            '10 бубей':10, 'Валет бубей':10,
            'Дама бубей':10, 'Король бубей': 10}

    # Вернуть колоду.
    return deck

# Функция deal_cards раздает заданное количество карт
# из колоды.

def deal_cards(deck, number):
    # Инициализировать накопитель количества карт на руках.
    hand_value = 0

    # Убедиться, что количество карт для раздачи
    # не больше количества карт в колоде.
    if number > len(deck):
        number = len(deck)

    # Раздать карты и накопить их значения.
    for count in range(number):
        card, value = deck.popitem()
        print(card)
        hand_value += value

    # Показать величину карт на руках.
    print('Величина карт на руках:', hand_value)

# Вызвать главную функцию.
main()


# ### Программа 9-2 (birthdays.py)

# In[19]:


# Эта программа применяет словарь для хранения
# имен и дней рождения друзей.

# Глобальные константы для пунктов меню
LOOK_UP = 1
ADD = 2
CHANGE = 3
DELETE = 4
QUIT = 5

# Главная функция
def main():
    # Создать пустой словарь.
    birthdays = {}

    # Инициализировать переменную для выбора пользователя.
    choice = 0

    while choice != QUIT:
        # Получить выбранный пользователем пункт меню.
        choice = get_menu_choice()

        # Обработать выбранный вариант действий.
        if choice == LOOK_UP:
            look_up(birthdays)
        elif choice == ADD:
            add(birthdays)
        elif choice == CHANGE:
            change(birthdays)
        elif choice == DELETE:
            delete(birthdays)
            
# Функция get_menu_choice выводит меню и получает 
# проверенный на допустимость выбранный пользователем пункт.
def get_menu_choice():
    print()
    print('Друзья и их дни рождения')
    print('------------------------')
    print('1. Найти день рождения')
    print('2. Добавить новый день рождения')
    print('3. Изменить день рождения')
    print('4. Удалить день рождения')
    print('5. Выйти из программы')
    print()

    # Получить выбранный пользователем пункт.
    choice = int(input('Введите выбранный пункт: '))

    # Проверить выбранный пункт на допустимость.
    while choice < LOOK_UP or choice > QUIT:
        choice = int(input('Введите выбранный пункт: '))

    # Вернуть выбранный пользователем пункт.
    return choice

# Фукнция look_up отыскивает имя
# в словаре birthdays.
def look_up(birthdays):
    # Получить искомое имя.
    name = input('Введите имя: ')

    # Отыскать его в словаре.
    print(birthdays.get(name, 'Не найдено.'))

# Функция add добавляет новую запись
# в словарь birthdays.
def add(birthdays):
    # Получить имя и день рождения.
    name = input('Введите имя: ')
    bday = input('Введите день рождения: ')

    # Если имя не существует, то его добавить.
    if name not in birthdays:
        birthdays[name] = bday
    else:
        print('Эта запись уже существует.')

# Функция change изменяет существующую
# запись в словаре birthdays.
def change(birthdays):
    # Получить искомое имя.
    name = input('Введите имя: ')

    if name in birthdays:
        # Получить новый день рождения.
        bday = input('Введите новый день рождения: ')

        # Обновить запись.
        birthdays[name] = bday
    else:
        print('Это имя не найдено.')

# Функция delete удаляет запись из
# словаря birthdays.
def delete(birthdays):
    # Получить искомое имя.
    name = input('Введите имя: ')

    # Если имя найдено, то удалить эту запись.
    if name in birthdays:
        del birthdays[name]
    else:
        print('Это имя не найдено.')

# Вызвать главную функцию.
main()


# ## 9.2 Множества

# ### Программа 9-3 (sets.py)

# In[1]:


# Эта программа демонстрирует различные операции над множествами.
baseball = set(['Джоди', 'Кармен', 'Аида', 'Алиция'])
basketball = set(['Эва', 'Кармен', 'Алиция', 'Сара'])

# Показать членов бейсбольного множества.
print('Эти студенты состоят в бейсбольной команде:')
for name in baseball:
    print(name)

# Показать членов баскетбольного множества.
print()
print('Эти студенты состоят в баскетбольной команде:')
for name in basketball:
    print(name)

# Продемонстрировать пересечение
print()
print('Эти студенты играют и в бейсбол, и в басктбол:')
for name in baseball.intersection(basketball):
    print(name)

# Продемонстрировать объединение
print()
print('Эти студенты играют в одну или обе спортивных игры:')
for name in baseball.union(basketball):
    print(name)

# Продемонстрировать разность между бейсболом и баскетболом
print()
print('Эти студенты играют в бейсбол, но не в баскетбол:')
for name in baseball.difference(basketball):
    print(name)

# Продемонстрировать разность между баскетболом и бейсболом
print()
print('Эти студенты играют в баскетбол, но не в бейсбол:')
for name in basketball.difference(baseball):
    print(name)

# Продемонстрировать симметрическую разность
print()
print('Эти студенты играют в одну из спортивных игр, но не в обе:')
for name in baseball.symmetric_difference(basketball):
    print(name)


# ## 9.2 Сериализация объектов

# ### Программа 9-4 (pickle_objects.py)

# In[7]:


# Эта программа демонстрирует консервацию объектов.
import pickle

# Главная функция
def main():
    again = 'д' # Для управления повторением цикла

     # Открыть файл для двоичной записи.
    output_file = open('info.dat', 'wb')

    # Получать данные, пока пользователь не решит прекратить.
    while again.lower() == 'д':
        # Получить данные о человеке и сохранить их.
        save_data(output_file)

        # Пользователь желает ввести еще данные?
        again = input('Желаете ввести еще данные? (д/н): ')

    # Закрыть файл.
    output_file.close()

# Функция save_data получает данные о человеке,
# сохраняет их в словаре и затем консервирует
# словарь в указанном файле.
def save_data(file):
    # Создать пустой словарь.
    person = {}

    # Получить данные о человеке и сохранить
    # их в словаре.
    person['имя'] = input('Имя: ')
    person['возраст'] = int(input('Возраст: '))
    person['вес'] = float(input('Вес: '))

    # Законсервировать словарь.
    pickle.dump(person, file)

# Вызвать главную функцию.
main()


# ### Программа 9-5 (unpickle_objects.py)

# In[9]:


# Эта программа демонстрирует расконсервацию объектов.
import pickle

# Главная функция
def main():
    end_of_file = False # Для обозначения конца файла

    # Открыть файл для двоичного чтения.
    input_file = open('info.dat', 'rb')

    # Прочитать файл до конца.
    while not end_of_file:
        try:
            # Расконсервировать следующий объект.
            person = pickle.load(input_file)

            # Показать объект.
            display_data(person)
        except EOFError:
            # Установить флаг, чтобы обозначить, что
            # был достигнут конец файла.
            end_of_file = True

    # Закрыть файл.
    input_file.close()

# Функция display_data показывает данные о человеке
# в словаре, который передан в качестве аргумента.
def display_data(person):
    print('Имя:', person['имя'])
    print('Возраст:', person['возраст'])
    print('Вес:', person['вес'])
    print()

# Вызвать главную функцию.
main()


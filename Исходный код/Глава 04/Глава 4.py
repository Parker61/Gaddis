
# coding: utf-8

# In[ ]:


# -*- coding: utf-8 -*-


# # Глава 4. Структуры с повторением 

# ## Цикл while: цикл c условием повторения

# ### Программа 4-1 (commission.py)

# In[1]:


# Эта программа вычисляет торговые комиссионные.

# Создать переменную для управления циклом.
keep_going = 'д'

# Вычислить серию комиссионных вознаграждений.
while keep_going == 'д':
    # Получить продажи продавца и его ставку комиссионных.
    sales = float(input('Введите объем продаж: '))
    comm_rate = float(input('Введите ставку комиссионных: '))

    # Рассчитать комиссионное вознаграждение.
    commission = sales * comm_rate

    # Показать комиссионное вознаграждение.
    print('Комиссионное вознаграждение составляет $',
          format(commission, ',.2f'), sep='')

    # Убедиться, что пользователь хочет выполнить еще одно.
    keep_going = input('Хотите вычислить еще одно ' +
                       '(Введите д, если да): ')


# ### Программа 4-2 (temperature.py)

# In[2]:


# Эта программа помогает лаборанту в процессе
# контроля за температурой вещества.

# Именованная константа, которая представляет максимальную
# температуру.
MAX_TEMP = 102.5

# Получить температуру вещества.
temperature = float(input("Введите температуру вещества в градусах Цельсия: "))

# Пока есть необходимость, инструктировать пользователя
# в корректировке термостата.
while temperature > MAX_TEMP:
    print('Температура слишком высокая.')
    print('Убавьте термостат и подождите')
    print('5 минут. Затем снимите показание температуры')
    print('снова и введите полученное значение.')
    temperature = float(input('Введите новое показание температуры: '))

# Напомнить пользователю проконтролировать температуру снова
# через 15 минут.
print('Температура приемлемая.')
print('Проверьте ее снова через 15 минут.')


# ### Программа 4-3 (infinite.py)

# In[ ]:


# Эта программа демонстрирует бесконечный цикл.
# Создать переменную, которая будет управлять циклом.
keep_going = 'д'

# Предупреждение! Бесконечный цикл!

# ******************************************************
# Чтобы остановить бесконечный цикл в блокноте Jupyter, 
# следует выбрать в меню элемент Kernel (Ядро) 
# и в ниспадающем списке выбрать Restart (Перезапустить)
# ******************************************************

while keep_going == 'д':
    # Получить продажи продавца и его ставку комиссионных.
    sales = float(input('Введите объем продаж: '))
    comm_rate = float(input('Введите ставку комиссионных: '))

    # Рассчитать комиссионное вознаграждение.
    commission = sales * comm_rate

    # Показать комиссионное вознаграждение.
    print('Комиссионное вознаграждение составляет $',
          format(commission, ',.2f'), sep='')


# ## 4.3 Цикл for: цикл со счетчиком повторений 

# ### Программа 4-4 (simple_loop1.py)

# In[7]:


# Эта программа демонстрирует простой цикл for,
# который использует список чисел.

print('Я покажу числа от 1 до 5.')
for num in [1, 2, 3, 4, 5]:
    print(num)


# ### Программа 4-5 (simple_loop2.py)

# In[6]:


# Эта программа демонстрирует простой цикл for,
# который использует список чисел.

print('Я покажу нечетные числа от 1 до 9.')
for num in [1, 3, 5, 7, 9]:
    print(num)


# ### Программа 4-6 (simple_loop3.py)

# In[1]:


# Эта программа демонстрирует простой цикл for,
# который использует список строковых значений.

for name in ['Мигнуть', 'Моргнуть', 'Кивнуть']:
    print(name)


# ### Программа 4-7 (simple_loop4.py)

# In[4]:


# Эта программа демонстрирует применение 
# функции range с циклом for.

# Напечатать сообщение пять раз.
for x in range(5):
    print('Привет, мир!')


# ### Программа 4-8 (squares.py)

# In[3]:


# Эта программа использует цикл для вывода
# таблицы с числами от 1 до 10
# и их квадратами.

# Напечатать заголовки таблицы.
print('Число\tКвадрат числа')
print('---------------------')

# Напечатать числа от 1 до 10
# и их квадраты.
for number in range(1, 11):
    square = number**2
    print(number, '\t', square)


# ### Программа 4-9 (speed_converter.py)

# In[3]:


# Эта программа преобразует скорости от 60 
# до 130 км/ч (с приращениями в 10 км)
# в mph.

START_SPEED = 60            # Начальная скорость
END_SPEED = 131             # Конечная скорость
INCREMENT = 10              # Приращение скорости
CONVERSION_FACTOR = 0.6214  # Коэффициент пересчета

# Напечатать заголовки таблицы.
print('KPH\tMPH')
print('--------------')

# Напечатать скорости.
for kph in range(START_SPEED, END_SPEED, INCREMENT):
     mph = kph * CONVERSION_FACTOR
     print(kph, '\t', format(mph, '.1f'))


# ### Программа 4-10 (user_squares1.py)

# In[6]:


# Эта программа использует цикл для вывода
# таблицы чисел и их квадратов.

# Получить конечный предел.
print('Эта программа выводит список чисел')
print('и их квадраты (начиная с 1).')
end = int(input('Введите предельное число: '))

# Напечатать заголовки таблицы.
print()
print('Число\tКвадрат числа')
print('---------------------')

# Напечатать числа и их квадраты.
for number in range(1, end + 1):
    square = number**2
    print(number, '\t', square)


# ### Программа 4-11 (user_squares2.py)

# In[2]:


# Эта программа использует цикл для вывода
# таблицы чисел и их квадратов.

# Получить начальное значение.
print('Эта программа выводит список чисел')
print('и их квадратов.')
start = int(input('Введите начальное число: '))

# Получить конечный предел.
end = int(input('Насколько далеко мне заходить? '))
 
# Напечатать заголовки таблицы.
print()
print('Число\tКвадрат числа')
print('---------------------')

# Напечатать числа и их квадраты.
for number in range(start, end + 1):
    square = number**2
    print(number, '\t', square)


# ## 4.4 Вычисление промежуточной суммы

# ### Программа 4-12 (sum_numbers.py)

# In[7]:


# Эта программа вычисляет сумму серии
# чисел, вводимых пользователем.

MAX = 5 # Максимальное число

# Инициализировать накапливающую переменную.
total = 0.0

# Объяснить, что мы делаем.
print('Эта программа вычисляет сумму из')
print(MAX, 'чисел, которые вы введете.')

# Получить числа и их накопить.
for counter in range(MAX):
    number = int(input('Введите число: '))
    total = total + number

# Показать сумму чисел.
print('Сумма составляет', total)


# ## 4.5 Сигнальные метки

# ### Программа 4-13 (property_tax.py)

# In[3]:


# Эта программа показывает налоги на имущество.

TAX_FACTOR = 0.0065 # Представляет налоговый коэффициент.

# Получить номер первого лота.
print('Введите номер имущественного лота')
print('либо 0, что завершить работу.')
lot = int(input('Номер лота: '))

# Продолжить обработку, пока пользователь
# не введет номер лота 0.
while lot != 0:
    # Получить стоимость имущества.
    value = float(input('Введите стоимость имущества: '))

    # Исчислить налог на имущество.
    tax = value * TAX_FACTOR

    # Показать налог.
    print('Налог на имущество: $', format(tax, ',.2f'), sep='')

    # Получить следующий номер лота.
    print('Введите следующий номер либо')
    print('введите 0, чтобы завершить работу.')
    lot = int(input('Номер лота: '))


# ### Программа 4-14 (gross_pay.py)

# In[1]:


# Эта программа показывает заработную плату до удержаний.
# Получить количество отработанных часов.
hours = int(input('Введите часы, отработанные на этой неделе: '))

# Получить почасовую ставку.
pay_rate = float(input('Введите почасовую ставку: '))

# Рассчитать заработную плату до удержаний.
gross_pay = hours * pay_rate

# Показать заработную плату до налоговых и прочих удержаний.
print('Заработная плата до удержаний составляет: $', format(gross_pay, ',.2f'), sep='')


# ## 4.6 Циклы валидации входных данных

# ### Программа 4-15 (retail_no_validation.py)

# In[2]:


# Эта программа вычисляет розничные цены.

MARK_UP = 2.5 # Процент надбавки
another = 'д' # Переменная управления циклом.

# Обработать один или несколько товаров.
while another == 'д' or another == 'Д':
    # Получить оптовую стоимость товара.
    wholesale = float(input("Введите оптовую стоимость " +
                             "товара: "))

    # Вычислить розничную цену.
    retail = wholesale * MARK_UP

    # Показать розничную цену.
    print('Розничная цена: $', format(retail, ',.2f'), sep='')

    # Повторить?
    another = input('Есть еще один товар? ' +
                    '(Введите д, если да): ')


# ### Программа 4-16 (retail_with_validation.py)

# In[5]:


# Эта программа вычисляет розничные цены.

MARK_UP = 2.5 # Процент надбавки
another = 'д' # Переменная управления циклом.

# Обработать один или несколько товаров.
while another == 'д' or another == 'Д':
    # Получить оптовую стоимость товара.
    wholesale = float(input("Введите оптовую стоимость " +
                            "товара: "))

    # Проверить допустимость оптовой стоимости.
    while wholesale < 0:
        print('ОШИБКА: стоимость не может быть отрицательной.')
        wholesale = float(input('Введите правильную ' +
                                'оптовую стоимость: '))

    # Вычислить розничную цену.
    retail = wholesale * MARK_UP

    # Показать розничную цену.
    print('Розничная цена: $', format(retail, ',.2f'), sep='')


    # Повторить?
    another = input('Есть еще один товар? ' +
                    '(Введите д, если да): ')


# ### Программа 4-17 (test_score_averages.py)

# In[4]:


# Эта программа усредняет оценки. Она запрашивает количество
# студентов и количество оценок в расчете на студента.

# Получить количество студентов.
num_students = int(input('Сколько у вас студентов? '))

# Получить количество оценок в расчете на студента.
num_test_scores = int(input('Сколько оценок в расчете на студента? '))

# Определить средний балл каждого студента.
for student in range(num_students):
    # Инициализировать накопитель оценок.
    total = 0.0
    # Получить оценки за лабораторные работы.
    print('Номер студента', student + 1)
    print('––––––––––––––––')
    for test_num in range(num_test_scores):
        print('Номер лабораторной работы', test_num + 1, end='')
        score = float(input(': '))
        # Прибавить оценку в накопитель.
        total += score

    # Рассчитать средний балл этого студента.
    average = total / num_test_scores

    # Показать средний балл.
    print('Средний балл студента номер', student + 1,
          'составляет:', average)
    print()


# ### Программа 4-18 (rectangular_pattern.py)

# In[1]:


# Эта программа выводит прямоугольную комбинацию 
# звездочек.
rows = int(input('Сколько строк? '))
cols = int(input('Сколько столбцов? '))

for r in range(rows):
    for c in range(cols):
        print('*', end='')
    print()


# ### Программа 4-19 (triangle_pattern.py)

# In[2]:


# Эта программа выводит треугольную комбинацию.
BASE_SIZE = 8

for r in range(BASE_SIZE):
    for c in range(r + 1):
        print('*', end='')
    print()


# ### Программа 4-20 (stair_step_pattern.py)

# In[3]:


# Эта программа выводит ступенчатую комбинацию.
NUM_STEPS = 6
 
for r in range(NUM_STEPS):
    for c in range(r):
        print(' ', end='')
    print('#')


# ## 4.8 Черепашья графика: применение циклов для рисования узоров

# ### Программа 4-21 (concentric_circles.py)

# In[5]:


# Концентрические круги
import turtle

# Именованные константы
NUM_CIRCLES = 20
STARTING_RADIUS = 20 
OFFSET = 10
ANIMATION_SPEED = 0

# Настроить черепаху.
turtle.speed(ANIMATION_SPEED)
turtle.hideturtle()

# Задать радиус первого круга
radius = STARTING_RADIUS

# Нарисовать круги.
for count in range(NUM_CIRCLES):
    # Нарисовать круг.
    turtle.circle(radius)

    # Получить координаты следующего круга.
    x = turtle.xcor()
    y = turtle.ycor() - OFFSET

    # Вычислить радиус следующего круга.
    radius = radius + OFFSET

    # Позиция черепахи для следующего круга.
    turtle.penup()
    turtle.goto(x, y)
    turtle.pendown() 


# ### Программа 4-22 (spiral_circles.py)

# In[1]:


# Эта программа рисует узор, используя повторяющиеся круги.
import turtle

# Именованные константы
NUM_CIRCLES = 36     # Количество рисуемых кругов
RADIUS = 100         # Радиус каждого круга
ANGLE = 10           # Угол поворота
ANIMATION_SPEED = 0  # Скорость анимации

# Задать скорость анимации.
turtle.speed(ANIMATION_SPEED)

# Нарисовать 36 кругов, наклоняя черепаху на
# 10 градусов после того, как каждый круг был нарисован.
for x in range(NUM_CIRCLES):
    turtle.circle(RADIUS)
    turtle.left(ANGLE)


# ### Программа 4-23 (spiral_lines.py)

# In[2]:


# Эта программа рисует узор, используя повторяющиеся линии.
import turtle

# Именованные константы
START_X = -200       # Стартовая координата X
START_Y = 0          # Стартовая координата Y 
NUM_LINES = 36       # Количество рисуемых линий
LINE_LENGTH = 400    # Длина каждой линии
ANGLE = 170          # Угол поворота
ANIMATION_SPEED = 0  # Скорость анимации

# Переместить черепаху в начальную позицию.
turtle.hideturtle()
turtle.penup()
turtle.goto(START_X, START_Y)
turtle.pendown()

# Задать скорость анимации.
turtle.speed(ANIMATION_SPEED)

# Нарисовать 36 кругов, наклоняя черепаху на
# 170 градусов после того, как каждая линия была нарисована.
for x in range(NUM_LINES):
    turtle.forward(LINE_LENGTH)
    turtle.left(ANGLE)  

